RhoSync Introduction
===

RhoSync is the first of a new category of “mobile app integration” servers. Using RhoSync drastically simplifies the development of connectivity to an enterprise backend app. The RhoSync server and built-in RhoSync client in the smartphone app perform all the work to get data down to the device. This eliminates 50 to 80 percent of the development effort in enterprise smartphone apps: performing the backend application integration.

RhoSync also does the ongoing synchronization work: keeping all of the data from backend applications current on the local device.   As information is changed in backend applications it is immediately synchronized down to all devices, and available on devices even when they are offline.  Data changed on the devices is also synchronized by RhoSync to the backend system.

RhoSync does not require use of Rhodes for the client app.  It can also be used from apps written in Objective C or even from other frameworks using JavaScript.

RhoSync consists of the following components:

* Synchronization Framework - The core of RhoSync, this facilitates data synchronization between the Rhodes / RhoSync-Client and a 3rd party source (SOAP, REST, etc...). Each source is synchronized by implementing a simple "source adapter" class. The client connects with the embedded [sinatra](http://www.sinatrarb.com/) server to interact with the collection of source adapters.  RhoSync uses [redis](http://redis.io/) to efficiently cache data to be synchronized.

* REST API - RhoSync exposes a simple REST API for interacting with an application.  See the [REST API docs](/rhosync/rest-api) for more information.

* Administration Web Console - The RhoSync [web console](/rhosync/web-console) is sinatra server used for manipulating and peeking into a running RhoSync app. The console uses the [RhoSync REST API](/rhosync/rest-api) for everything it does.

* Asynchronous Job System - RhoSync uses the [resque](https://github.com/defunkt/resque) library to provide asynchronous execution of various tasks it needs to perform. These tasks include source adapter execution, sending push messages, preparing bulk data, etc... Resque is dead-simple to use and highly extensible, so it can easily be used for other functionality not described here.

The bulk of the work involved in making RhoSync work with your smartphone application is writing source adapters. This process is described in the [source adapter section](/rhosync/source-adapters). A longer [tutorial](/rhosync/tutorial) is also available.